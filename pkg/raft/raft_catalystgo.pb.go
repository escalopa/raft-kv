// Code generated by protoc-gen-catalystgo. DO NOT EDIT.

package raft

import (
	_ "embed"
	context "context"

	go_grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"google.golang.org/grpc"
)

//go:embed raft.swagger.json
var swaggerJSON []byte

type RaftServiceDesc struct {
	svc RaftServer
	i   grpc.UnaryServerInterceptor
}

func NewRaftServiceDesc(svc RaftServer) *RaftServiceDesc {
	return &RaftServiceDesc{
		svc: svc,
	}
}

func (d *RaftServiceDesc) RegisterGRPC(s *grpc.Server) {
	RegisterRaftServer(s, d.svc)
}

func (d *RaftServiceDesc) RegisterHTTP(ctx context.Context, mux *runtime.ServeMux) error {
	if d.i == nil {
		return RegisterRaftHandlerServer(ctx, mux, d.svc)
	}

	return RegisterRaftHandlerServer(ctx, mux, &proxyRaftServer{
		RaftServer:  d.svc,
		interceptor: d.i,
	})
}

func (d *RaftServiceDesc) SwaggerJSON() []byte {
	return swaggerJSON
}

// WithHTTPUnaryInterceptor adds GRPC Server interceptors for the HTTP unary endpoints. Call again to add more.
func (d *RaftServiceDesc) WithHTTPUnaryInterceptor(i grpc.UnaryServerInterceptor) {
	if d.i == nil {
		d.i = i
	} else {
		d.i = go_grpc_middleware.ChainUnaryServer(d.i, i)
	}
}

type proxyRaftServer struct {
	RaftServer
	interceptor grpc.UnaryServerInterceptor
}

func (p *proxyRaftServer) AppendEntry(ctx context.Context, req *AppendEntryRequest) (*AppendEntryResponse, error) {
	info := &grpc.UnaryServerInfo{
		Server:     p.RaftServer,
		FullMethod: "/raft.Raft/AppendEntry",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return p.RaftServer.AppendEntry(ctx, req.(*AppendEntryRequest))
	}

	resp, err := p.interceptor(ctx, req, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}

	return resp.(*AppendEntryResponse), nil
}

func (p *proxyRaftServer) Vote(ctx context.Context, req *VoteRequest) (*VoteResponse, error) {
	info := &grpc.UnaryServerInfo{
		Server:     p.RaftServer,
		FullMethod: "/raft.Raft/Vote",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return p.RaftServer.Vote(ctx, req.(*VoteRequest))
	}

	resp, err := p.interceptor(ctx, req, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}

	return resp.(*VoteResponse), nil
}
