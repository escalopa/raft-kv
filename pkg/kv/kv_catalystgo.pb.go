// Code generated by protoc-gen-catalystgo. DO NOT EDIT.

package kv

import (
	_ "embed"
	context "context"

	go_grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"google.golang.org/grpc"
)

//go:embed kv.swagger.json
var swaggerJSON []byte

type KVServiceDesc struct {
	svc KVServer
	i   grpc.UnaryServerInterceptor
}

func NewKVServiceDesc(svc KVServer) *KVServiceDesc {
	return &KVServiceDesc{
		svc: svc,
	}
}

func (d *KVServiceDesc) RegisterGRPC(s *grpc.Server) {
	RegisterKVServer(s, d.svc)
}

func (d *KVServiceDesc) RegisterHTTP(ctx context.Context, mux *runtime.ServeMux) error {
	if d.i == nil {
		return RegisterKVHandlerServer(ctx, mux, d.svc)
	}

	return RegisterKVHandlerServer(ctx, mux, &proxyKVServer{
		KVServer:    d.svc,
		interceptor: d.i,
	})
}

func (d *KVServiceDesc) SwaggerJSON() []byte {
	return swaggerJSON
}

// WithHTTPUnaryInterceptor adds GRPC Server interceptors for the HTTP unary endpoints. Call again to add more.
func (d *KVServiceDesc) WithHTTPUnaryInterceptor(i grpc.UnaryServerInterceptor) {
	if d.i == nil {
		d.i = i
	} else {
		d.i = go_grpc_middleware.ChainUnaryServer(d.i, i)
	}
}

type proxyKVServer struct {
	KVServer
	interceptor grpc.UnaryServerInterceptor
}

func (p *proxyKVServer) Get(ctx context.Context, req *GetRequest) (*GetResponse, error) {
	info := &grpc.UnaryServerInfo{
		Server:     p.KVServer,
		FullMethod: "/kv.KV/Get",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return p.KVServer.Get(ctx, req.(*GetRequest))
	}

	resp, err := p.interceptor(ctx, req, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}

	return resp.(*GetResponse), nil
}

func (p *proxyKVServer) Set(ctx context.Context, req *SetRequest) (*SetResponse, error) {
	info := &grpc.UnaryServerInfo{
		Server:     p.KVServer,
		FullMethod: "/kv.KV/Set",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return p.KVServer.Set(ctx, req.(*SetRequest))
	}

	resp, err := p.interceptor(ctx, req, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}

	return resp.(*SetResponse), nil
}

func (p *proxyKVServer) Del(ctx context.Context, req *DelRequest) (*DelResponse, error) {
	info := &grpc.UnaryServerInfo{
		Server:     p.KVServer,
		FullMethod: "/kv.KV/Del",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return p.KVServer.Del(ctx, req.(*DelRequest))
	}

	resp, err := p.interceptor(ctx, req, info, handler)
	if err != nil || resp == nil {
		return nil, err
	}

	return resp.(*DelResponse), nil
}
